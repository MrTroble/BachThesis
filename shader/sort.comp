#version 460

layout (binding=0) uniform Camera {
    mat4 model;
    mat4 view;
    mat4 proj;
    vec4 colorDepth;
} camera;
layout (binding=1) buffer Index {
    uvec4 data[];
} index;
layout (binding=2) buffer Vertex {
    vec4 vertexData[];
} vertex;
layout(binding=3) buffer block {
    uint toSort[];
};
layout(binding=4) buffer block2 {
    vec4 midpoints[];
};

layout(push_constant) uniform amount {
    uint size;
    uint type;
};

void compareAndSwap(uint v1, uint v2) {
    mat4 matrix =  camera.proj * camera.view * camera.model;
    vec4 value1 =  matrix * midpoints[toSort[v1]];
    float z1 = value1.z / value1.w;
    vec4 value2 =  matrix * midpoints[toSort[v2]];
    float z2 = value2.z / value2.w;
    if((v1 & v2) == 0) {
        if(z1 < z2)
            return;
    } else {
        if(z1 > z2)
            return;
    }
    uint temp = toSort[v1];
    toSort[v1] = toSort[v2];
    toSort[v2] = temp;
}

void main() {
    if(type == 0) {
        uint index1 = gl_WorkGroupID.x; 
        uint index2 = gl_WorkGroupID.x + uint(pow(2, size)) + 1;
        compareAndSwap(index1, index2);
    } else {
        
    }
}

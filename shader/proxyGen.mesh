#version 460

#extension GL_EXT_mesh_shader : require

#define FLT_MAX 3.402823466e+38
#define FLT_MIN 1.175494351e-38

layout (local_size_x=128) in;

layout (triangles) out;
layout (max_vertices=5, max_primitives=4) out;

// Task shader input
taskPayloadSharedEXT struct Meshlet {
    vec4 pointsToUse[4];
    uint tetID;
} m;

// Color out
layout(location=2) perprimitiveEXT out vec3 lambdasOut[];
// Depth output
layout(location=0) out vec4 depthsMinMax[];

float aboveLine(vec2 l1, vec2 l2, vec2 p) {
    vec2 Md = l2 - l1;
    vec2 n = vec2(Md.y, -Md.x);
    vec2 dir = l1 - p;
    return dot(normalize(n), dir);
}

float distToLine(vec2 l1, vec2 l2, vec2 p) {
    return abs(aboveLine(l1, l2, p));
}

void main() {
    const vec4 pointsToUse[4] = m.pointsToUse;
    const uint currentClass = m.tetID % 3;
    vec3 primColorOut = vec3(0.0f, 0.0f, 0.0f);
    primColorOut[currentClass] = 1.0f;
   
    lambdasOut[0] = primColorOut;
    lambdasOut[1] = primColorOut;
    lambdasOut[2] = primColorOut;
    lambdasOut[3] = primColorOut;

    uint mostLeft = 0;
    float currentX = FLT_MAX;
    uint mostRight = 0;
    float currentXRight = -FLT_MAX;
    for(uint x = 0; x < 4; x++) {
        const vec4 projection = pointsToUse[x];
        gl_MeshVerticesEXT[x].gl_Position = vec4(projection.xy, 0.0f, 1.0f);
        if(currentX > projection.x) {
            mostLeft = x;
            currentX = projection.x;
        }
        if(currentXRight < projection.x) {
            mostRight = x;
            currentXRight = projection.x;
        }
    }
    
    float distanceToLine = 0;
    uint mostDistantOne = 4;
    uint otherDist = 4;
    for(uint x = 0; x < 4; x++) {
        if(mostRight == x || mostLeft == x) {
            continue;
        }
        float dist = distToLine(pointsToUse[mostLeft].xy, pointsToUse[mostRight].xy, pointsToUse[x].xy);
        if(dist > distanceToLine) {
            distanceToLine = dist;
            mostDistantOne = x;
            if(otherDist == 4)
                otherDist = mostDistantOne;
        } else {
            otherDist = x;
        }
    }

    const uint triangleOuter[3] = { mostLeft, mostRight, mostDistantOne };

    const vec2 P2 = pointsToUse[mostDistantOne].xy;
    const vec2 dP0 = pointsToUse[mostLeft].xy - P2;
    const vec2 dP1 = pointsToUse[mostRight].xy - P2;
    const vec2 dP3 = pointsToUse[otherDist].xy - P2;
    const float faktor = dP0.y * dP1.x - dP0.x * dP1.y;
    // Multiply inverse
    const vec2 lambdas = vec2(dP1.x * dP3.y - dP1.y * dP3.x, dP0.y * dP3.x - dP0.x * dP3.y) / faktor;
    const float lambda2 = 1.0f - lambdas.y - lambdas.x;
    if(lambdas.x < 0.0f || lambdas.y < 0.0f || lambda2 < 0.0f) {
        // Case 2
        const float p2Dist = aboveLine(pointsToUse[mostLeft].xy, pointsToUse[mostRight].xy, P2);
        const float p3Dist = aboveLine(pointsToUse[mostLeft].xy, pointsToUse[mostRight].xy, pointsToUse[otherDist].xy);

        uvec2 lineOne;
        uvec2 lineTwo;
        if(sign(p2Dist) != sign(p3Dist)) {
            // Case: Line is bisecting the quad
            lineOne.x = mostLeft;
            lineOne.y = mostRight;
            lineTwo.x = otherDist;
            lineTwo.y = mostDistantOne;
        } else {
            // Case: We need to find the bisection point
            const vec2 baseline = normalize(pointsToUse[mostRight].xy - pointsToUse[mostLeft].xy);
            
            const float w1 = dot(baseline, normalize(pointsToUse[mostRight].xy - pointsToUse[otherDist].xy));
            const float w2 = dot(baseline, normalize(pointsToUse[mostRight].xy - pointsToUse[mostDistantOne].xy));
            lineOne.x = mostLeft;
            lineOne.y = mostDistantOne;
            lineTwo.x = mostRight;
            lineTwo.y = otherDist;
            if(w1 < w2) {
                lineOne.y = otherDist;
                lineTwo.y = mostDistantOne;
            }
        }

        const vec2 P1 = pointsToUse[lineOne.x].xy;
        const vec2 P0 = pointsToUse[lineTwo.x].xy;
        const vec2 dP31 = pointsToUse[lineOne.y].xy - P1;
        const vec2 dP20 = pointsToUse[lineTwo.y].xy - P0;
        const vec2 dP01 = P0 - P1;
        
        const float s = (dP01.x * dP20.y - dP01.y  * dP20.x) / (dP31.x * dP20.y - dP31.y  * dP20.x);
        const vec2 midpoint = P1 + dP31 * s;
        const float t = dot(dP20, midpoint - P0) / dot(dP20, dP20);

        gl_MeshVerticesEXT[4].gl_Position = vec4(midpoint, 0.0f, 1.0f);

        gl_PrimitiveTriangleIndicesEXT[0] = uvec3(lineOne.y, lineTwo.y, 4);
        gl_PrimitiveTriangleIndicesEXT[1] = uvec3(lineOne.y, lineTwo.x, 4);
        gl_PrimitiveTriangleIndicesEXT[2] = uvec3(lineOne.x, lineTwo.y, 4);
        gl_PrimitiveTriangleIndicesEXT[3] = uvec3(lineOne.x, lineTwo.x, 4);

        for(uint x = 0; x < 4; x++) {
            const vec4 vz = pointsToUse[x];
            const float z = vz.z / vz.w;
            depthsMinMax[x] = vec4(vz.xy / vz.w, z, z);
        }
        const vec4 va = pointsToUse[lineOne.x];
        const vec4 vc = pointsToUse[lineOne.y];
        const vec4 vb = pointsToUse[lineTwo.x];
        const vec4 vd = pointsToUse[lineTwo.y];
        const float oneZ0 = 1.0f / ((1.0f - s) / va.z + s / vc.z);
        const float oneZ1 = 1.0f / ((1.0f - t) / vb.z + t / vd.z);

        depthsMinMax[4] = vec4(midpoint, min(oneZ0, oneZ1), max(oneZ0, oneZ1));

        SetMeshOutputsEXT(5, 4);
    } else {
        const float[] lambdaArray = {lambdas.x, lambdas.y, lambda2};
        float z1 = 0;
        for(uint x = 0; x < 3; x++) {
            const uint id = triangleOuter[x];
            const vec4 vz = pointsToUse[id];
            depthsMinMax[id] = vec4(vz.xy, vz.z, vz.z);
            z1 += lambdaArray[x] / vz.z;
        }
        const vec4 vz = pointsToUse[otherDist];
        const float z0 = vz.z;
        const float oneZ1 = 1.0f / z1;
        depthsMinMax[otherDist] = vec4(vz.xy, min(z0, oneZ1), max(z0, oneZ1));

        // Case 1
        gl_PrimitiveTriangleIndicesEXT[0] = uvec3(triangleOuter[0], triangleOuter[1], otherDist);
        gl_PrimitiveTriangleIndicesEXT[1] = uvec3(triangleOuter[1], triangleOuter[2], otherDist);
        gl_PrimitiveTriangleIndicesEXT[2] = uvec3(triangleOuter[2], triangleOuter[0], otherDist);

        SetMeshOutputsEXT(4, 3);
    }
}
